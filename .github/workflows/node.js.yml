name: NestJS CI/CD

on:
  push:
    branches:
      - main  # Trigger on commits to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:

  build_and_test:
    runs-on: ubuntu-latest

    steps:
    
      - name: Checkout code and set up Node.js
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build the project
        run: yarn build
      
      - name: Action For Semantic Release
        uses: cycjimmy/semantic-release-action@v4.1.0
            
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: ./dist
          key: ${{ runner.os }}-node-20-nest-build-${{ hashFiles('**/dist/**') }}

      - name: Test the build
        run: yarn test

  run-integration-tests:
    runs-on: ubuntu-latest
    needs: build_and_test

    strategy:
      fail-fast: false 
      matrix:
        containers: [1, 2] # Uses 2 parallel instances

    steps:

     - name: Checkout code and set up Node.js
       uses: actions/checkout@v4
       with:
        fetch-depth: 0

     - uses: actions/setup-node@v4
       with:
         node-version: '20.x'
         cache: 'yarn'

     - name: Install dependencies
       run: yarn install --frozen-lockfile

     - name: Build the project
       run: yarn build

     - name: Cache Docker layers
       uses: actions/cache@v4
       with:
         path: /tmp/.docker-cache
         key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile.mysql') }}
         restore-keys: |
           ${{ runner.os }}-docker-

     - name: Build MySQL Docker image
       run: |
         mkdir -p /tmp/.docker-cache
         docker build --cache-from type=local,src=/tmp/.docker-cache --cache-to type=local,dest=/tmp/.docker-cache -t my-mysql -f Dockerfile.mysql .

     - name: Run MySQL container
       run: |
         docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_DATABASE=db -e MYSQL_USER=admin -e MYSQL_PASSWORD=admin -p 3306:3306 my-mysql
             
     - name: Wait for MySQL
       run: |
         while ! docker exec mysql mysqladmin ping -h"localhost" --silent; do
           sleep 1
         done

     - name: Run E2E tests
       run: yarn test:e2e

     - name: Run Integration tests
       run: yarn test:integration

     - name: Stop and remove MySQL container
       if: always()
       run: |
         docker stop mysql
         docker rm mysql
