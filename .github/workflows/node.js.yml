name: NestJS CI/CD

on:
  push:
    branches:
      - main  # Trigger on commits to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:

  build_and_test:
    runs-on: ubuntu-latest

    steps:
    
      - name: Checkout code and set up Node.js
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build the project
        run: yarn build
      
      - name: Action For Semantic Release
        uses: cycjimmy/semantic-release-action@v4.1.0
            
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: ./dist
          key: ${{ runner.os }}-node-20-nest-build-${{ hashFiles('**/dist/**') }}

      - name: Run Unit Tests of the build
        run: yarn test
      
      - name: Run Unit Tests Coverage of the build
        run: yarn test:cov
        
      # - name: Setup Java 17
      #   uses: actions/setup-java@v4
      #   with:
      #     java-version: 17
      #     distribution: 'temurin'

      # - name: Install SonarQube Scanner
      #   run: yarn install-sonar-scanner

      # - name: Execute sonar-scanner at the project and save in SonarCloud
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     sonar-scanner \
      #       -Dsonar.projectKey=quarks-team_projeto-integrador-tecsus-backend \
      #       -Dsonar.organization=quarks-team \
      #       -Dsonar.host.url=https://sonarcloud.io \
      #       -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
      #       -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Publish Unit tests results
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-results
          path: test-results/unit
      
      - name: Publish Coverage Unit Tests results
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-results
          path: coverage/unit

  #     - name: Publish SonarQube scanner results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: sonar-scanner-results
  #         path: .scannerwork/


  run-integration-tests:
    runs-on: ubuntu-latest
    needs: build_and_test

    strategy:
      fail-fast: false 
      matrix:
        containers: [1] # Use 1 instance

    steps:

     - name: Checkout code and set up Node.js
       uses: actions/checkout@v4
       with:
        fetch-depth: 0

     - uses: actions/setup-node@v4
       with:
         node-version: '20.x'
         cache: 'yarn'

     - name: Install dependencies
       run: yarn install --frozen-lockfile

     - name: Build the project
       run: yarn build

     - name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v2

     - name: Cache Docker layers
       uses: actions/cache@v4
       with:
         path: /tmp/.buildx-cache
         key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile.mysql') }}
         restore-keys: |
           ${{ runner.os }}-buildx-

     - name: Build MySQL Docker image
       run: |
         docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache --output=type=docker -t my-mysql -f Dockerfile.mysql .

     - name: Run MySQL container
       run: |
         docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_DATABASE=db -e MYSQL_USER=admin -e MYSQL_PASSWORD=admin -p 3306:3306 my-mysql
             
     - name: Wait for MySQL
       run: |
         while ! docker exec mysql mysqladmin ping -h"localhost" --silent; do
           sleep 1
         done

     - name: Run E2E tests
       run: yarn test:e2e --detectOpenHandles --forceExit

     - name: Run Integration tests
       run: yarn test:integration --detectOpenHandles --forceExit

     - name: Publish E2E tests results
       uses: actions/upload-artifact@v4
       with:
         name: e2e-tests-results
         path: test-results/e2e

     - name: Publish integration tests results
       uses: actions/upload-artifact@v4
       with:
         name: integration-tests-results
         path: test-results/integration

     - name: Publish integration tests coverage results
       uses: actions/upload-artifact@v4
       with:
         name: integration-coverage-results
         path: coverage/integration

     - name: Stop and remove MySQL container
       if: always()
       run: |
         docker stop mysql
         docker rm mysql
